{"version":3,"sources":["reportWebVitals.ts","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","App","useState","update","fileRef","useRef","sizeRef","getFilename","paths","current","value","replace","split","undefined","length","slice","join","download","useCallback","a","files","cogoToast","error","size","Number","isInteger","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","err","readAsDataURL","data","base64","bytes","Uint8Array","from","atob","c","charCodeAt","json","convert","filename","element","document","createElement","blob","Blob","type","href","URL","createObjectURL","body","appendChild","click","remove","console","useEffect","className","Card","Content","Header","as","Form","onSubmit","e","preventDefault","Field","Button","onClick","positive","ref","accept","multiple","hidden","onChange","min","max","MAX_SAFE_INTEGER","defaultValue","primary","Meta","style","textAlign","Divider","marginBottom","Icon","name","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.07f43b7e.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { useCallback, useRef, useState } from 'react';\r\nimport { Form, Header, Button, Card, Icon, Divider } from 'semantic-ui-react';\r\nimport cogoToast from 'cogo-toast';\r\nimport { convert } from 'tgs2lottie';\r\nimport { useEffect } from 'react';\r\n\r\nfunction App() {\r\n  const [, update] = useState({});\r\n  const fileRef = useRef<HTMLInputElement>(null);\r\n  const sizeRef = useRef<HTMLInputElement>(null);\r\n\r\n  const getFilename = (): string | undefined => {\r\n    const paths = fileRef.current?.value.replace(/\\\\/g, '/').split('/');\r\n    if (paths === undefined) return undefined;\r\n    const filename = paths[paths.length - 1].split('.').slice(0, -1).join('.');\r\n    return filename;\r\n  }\r\n\r\n  const download = useCallback(async () => {\r\n    if (fileRef.current?.files == null || fileRef.current?.files.length === 0) {\r\n      cogoToast.error('please set the file');\r\n      return;\r\n    }\r\n\r\n    const size = Number(sizeRef.current?.value);\r\n    if (!Number.isInteger(size)) {\r\n      cogoToast.error('size is not integer');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const file = fileRef.current?.files[0];\r\n      const data: string = await (new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n          resolve(reader.result as string);\r\n        }\r\n        reader.onerror = (err) => {\r\n          reject(err);\r\n        }\r\n\r\n        reader.readAsDataURL(file);\r\n      }));\r\n\r\n      const base64 = data.split(';base64,').slice(1).join(';base64,');\r\n      const bytes = Uint8Array.from(atob(base64), c => c.charCodeAt(0));\r\n      const json = convert(bytes, size);\r\n\r\n      const filename = getFilename();\r\n      const element = document.createElement(\"a\");\r\n      const blob = new Blob([json], { type: 'text/json' });\r\n      element.href = URL.createObjectURL(blob);\r\n      element.download = `${filename}_${size}.json`;\r\n      document.body.appendChild(element);\r\n      element.click();\r\n      element.remove();\r\n    } catch (e) {\r\n      cogoToast.error('an error occurred during conversion!');\r\n      console.error(e);\r\n    } finally {\r\n      if (fileRef.current != null) fileRef.current.value = \"\";\r\n      update({});\r\n    }\r\n  }, [fileRef, sizeRef]);\r\n\r\n  useEffect(() => { update({}) }, [fileRef]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Card>\r\n        <Card.Content>\r\n          <Header as=\"h1\">TGS2Lottie</Header>\r\n\r\n          <Form onSubmit={(e) => e.preventDefault()}>\r\n            <Form.Field>\r\n              <label>Telegram Animated Sticker (.tgs):</label>\r\n              <Button size=\"tiny\" type=\"\" onClick={() => fileRef.current?.click()} positive>Select file</Button>\r\n              {getFilename() ? `${getFilename()}.tgs` : 'Please select a file'}\r\n\r\n              <input ref={fileRef} type=\"file\" accept=\".tgs\" multiple={false} hidden={true} onChange={() => update({})} />\r\n            </Form.Field>\r\n            <Form.Field>\r\n              <label>Size:</label>\r\n              <input ref={sizeRef} type=\"number\" min={1} max={Number.MAX_SAFE_INTEGER} defaultValue={512} />\r\n            </Form.Field>\r\n            <Button onClick={download} primary>Download</Button>\r\n          </Form>\r\n\r\n          <Card.Meta style={{ textAlign: 'right' }}>\r\n            <Divider style={{ marginBottom: 8 }} />\r\n            <a href=\"https://github.com/kamyu1537/tgs2lottie.git\">\r\n              <Icon name=\"github\" /> Github\r\n            </a>\r\n          </Card.Meta>\r\n        </Card.Content>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}